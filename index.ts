import "dotenv/config";
import { default as log } from "@botmock-api/log";
import { Batcher } from "@botmock-api/client";
import { writeJson, mkdirp, remove } from "fs-extra";
import { zipSync } from "cross-zip";
import { join } from "path";
import { EOL } from "os";
import { default as FileWriter } from "./lib/file";

enum Platforms {
  AIX = "aix",
  DARWIN = "darwin",
  BSD = "freebsd",
  LINUX = "linux",
  OPEN_BSD = "openbsd",
  SUN_OS = "sunos",
  WIN = "win32",
}

interface Paths {
  readonly outputPath: string;
  readonly intentPath: string;
  readonly entityPath: string;
}

/**
 * Removes and then creates the directories that hold generated files
 * @param paths object containing paths to directories that will hold files
 * generated by the script
 */
async function recreateOutputDirectories(paths: Paths): Promise<void> {
  const { outputPath, intentPath, entityPath } = paths;
  await remove(`${outputPath}.zip`);
  await remove(intentPath);
  await remove(entityPath);
  await remove(outputPath);
  await mkdirp(intentPath);
  await mkdirp(entityPath);
}

/**
 * Calls all fetch methods and calls all write methods
 * @remarks entry point to the script
 * @remarks `Batcher` performs fetch requests of project, board, intents, etc. for the project in the .env file
 * @param args argument vector provided when start script is run
 */
async function main(args: string[]): Promise<void> {
  const DEFAULT_OUTPUT = "output";
  let [, , outputDirectory] = args;
  if (typeof outputDirectory === "undefined") {
    outputDirectory = process.env.OUTPUT_DIR || DEFAULT_OUTPUT;
  }
  const intentPath = join(outputDirectory, "intents");
  const entityPath = join(outputDirectory, "entities");
  log("creating output directories");
  await recreateOutputDirectories({
    outputPath: outputDirectory,
    intentPath,
    entityPath,
  });
  log("fetching project data");
  const { data: projectData } = await new Batcher({
    token: process.env.BOTMOCK_TOKEN,
    teamId: process.env.BOTMOCK_TEAM_ID,
    projectId: process.env.BOTMOCK_PROJECT_ID,
    boardId: process.env.BOTMOCK_BOARD_ID,
  }).batchRequest([
    "project",
    "board",
    "intents",
    "entities",
    "variables"
  ]);
  log("writing files");
  const fileWriter = new FileWriter({
    outputDirectory,
    projectData
  });
  // @ts-ignore
  fileWriter.on("write-complete", ({ basename }) => {
    log(`wrote ${basename}`);
  });
  await fileWriter.write();
  log("compressing generated files");
  if (process.platform === Platforms.DARWIN) {
    zipSync(outputDirectory, `${outputDirectory}.zip`);
    log(`${outputDirectory}.zip is ready to be imported in the Dialogflow console`);
  } else {
    log(`auto-compression not yet supported for ${process.platform}`);
  }
  log("done");
}

process.on("unhandledRejection", () => { });
process.on("uncaughtException", () => { });

main(process.argv).catch(async (err: Error) => {
  log(err.stack, { isError: true });
  const { message, stack } = err;
  await writeJson(join(__dirname, "err.json"), { message, stack }, { EOL, spaces: 2 });
});
